#!/usr/bin/env ruby
# Copyright (c) 2012 Jakub Pastuszek
#
# This file is part of Distributed Monitoring System.
#
# Distributed Monitoring System is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Distributed Monitoring System is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Distributed Monitoring System.  If not, see <http://www.gnu.org/licenses/>.

$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))

require 'pathname'
require 'dms-core'

VERSION = (Pathname.new(__FILE__).dirname + '../VERSION').read

Program::Tool.new('DMS Data Processor', VERSION) do
	cli do
		description "DMS data processor query tool"
		option :data_processor_address,
			short: :p, 
			description: 'Data processor ZeroMQ query interface adderss', 
			default: 'ipc:///tmp/dms-data-processor-query'
		option :time_from,
			short: :f,
			cast: lambda{|s| Time.parse(s + ' UTC')},
			description: 'time string representing how recent the data should be',
			default: Time.now.to_s
		option :time_span,
			short: :t,
			cast: Float,
			description: 'for how many seconds from time-form should the data be going back to',
			default: 60*60
		option :granularity,
			short: :g,
			cast: Float,
			description: 'minimal time differenc between values in seconds',
			default: 1.0
		arguments :tag_expression
	end

	main do |settings|
		ZeroMQ.new do |zmq|
			zmq.req_connect(settings.data_processor_address, linger: 0) do |query|
				dsq = DataSetQuery.new(settings.tag_expression.join(', '), settings.time_from, settings.time_span, settings.granularity)
				log.info "sending query: #{dsq}"

				query.send dsq do |response|
					log.info "received: #{response}"
				end.receive!
			end
		end
	end
end

